package com.hummingbee.system;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;

/**
 * Usage class that reads and writes serialized file storing all sprinkler usages
 * @author Nick
 *
 */
public class Usage {
	// usages serialized file path
	private static final String USAGES_FILE_PATH = "resources/usage.ser";
	
	// updates the stored usages and GUI
	public static void update(String sprinklerId, double usage) {
		// retrieve usages map
		HashMap<String, Double> sprinklerUsages = readUsage();
		// update the value for the sprinkler
		Double oldUsage = sprinklerUsages.get(sprinklerId) == null ? 0 : sprinklerUsages.get(sprinklerId);
		sprinklerUsages.put(sprinklerId, oldUsage + usage);
		// write usages map
		writeUsage(sprinklerUsages);
		// update display
	}
	
	/**
	 * reads usages from serialized file in resources folder
	 * @return HashMap<String, Double> of serialized usages, constructs a new HashMap if file doesn't exist
	 */
	public static HashMap<String, Double> readUsage() {
		HashMap<String, Double> map;
		File usagesFile = new File(USAGES_FILE_PATH);
		if (usagesFile.exists()) {
			try {
				FileInputStream fis = new FileInputStream(USAGES_FILE_PATH);
				ObjectInputStream ois = new ObjectInputStream(fis);
				map = (HashMap<String, Double>) ois.readObject();
				ois.close();
			} catch (IOException e) {
				// what to do on IOException? display a message?
				map = new HashMap<String, Double>();
				e.printStackTrace();
			} catch (Exception e) {
				map = new HashMap<String, Double>();
				e.printStackTrace();
			}
		}
		else {
			map = new HashMap<String, Double>();
		}
		
		return map;
	}
	
	/**
	 * serializes the HashMap and writes it to .ser file
	 * @param map the HashMap to serialize
	 */
	private static void writeUsage(HashMap<String, Double> map) {
		try {
			FileOutputStream fos = new FileOutputStream(USAGES_FILE_PATH);
	        ObjectOutputStream oos = new ObjectOutputStream(fos);
	        oos.writeObject(map);
	        oos.close();
		} catch (IOException e) {
			// what to do on IOException? display a message?
			e.printStackTrace();
		}
	}
	
	/**
	 * resets usages, data will be lost
	 */
	public static void resetUsages() {
		writeUsage(new HashMap<String, Double>());
	}

}
